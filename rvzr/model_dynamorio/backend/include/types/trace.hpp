///
/// File: Trace entries generated by the tracer
///
// Copyright (C) Microsoft Corporation
// SPDX-License-Identifier: MIT

#pragma once

#include <cstdint>
#include <ostream>

/// @brief Type of trace entries that can be observed
enum class trace_entry_type_t : uint8_t {
    ENTRY_EOT = 0, // end of trace
    ENTRY_PC = 1,
    ENTRY_READ = 2,
    ENTRY_WRITE = 3,
    ENTRY_EXCEPTION = 4,
    ENTRY_IND = 5,
};

/// @brief Pretty-printer for trace_entry_type_t
static constexpr const char *to_string(const trace_entry_type_t &type)
{
    switch (type) {
    case trace_entry_type_t::ENTRY_EOT:
        return "EOT";
    case trace_entry_type_t::ENTRY_PC:
        return "PC";
    case trace_entry_type_t::ENTRY_READ:
        return "READ";
    case trace_entry_type_t::ENTRY_WRITE:
        return "WRITE";
    case trace_entry_type_t::ENTRY_EXCEPTION:
        return "XCPT";
    case trace_entry_type_t::ENTRY_IND:
        return "IND";
    }

    return "UNKNOWN";
}

/// @brief An entry of an observed trace
struct trace_entry_t {
    // pc for instructions; address for memory accesses; target for indirect calls
    uint64_t addr;
    // instruction size for instructions; memory access size for memory accesses
    uint32_t size;
    // see trace_entry_type_t
    trace_entry_type_t type;
    // unused for now
    uint8_t padding[3]; // NOLINT

    /// @brief Declare a marker to identify traces of this type
    static constexpr char marker = 'T';

    /// @brief Pretty-printing for tracer output
    void dump(std::ostream &out) const
    {
        out << "[" << to_string(type) << "]";

        switch (type) {
        case trace_entry_type_t::ENTRY_EOT:
            out << "---- END OF TRACE ----\n";
            break;
        case trace_entry_type_t::ENTRY_PC:
            out << " pc: " << std::hex << addr;
            out << "  (instr sz: " << std::dec << size << ")";
            break;
        case trace_entry_type_t::ENTRY_READ:
        case trace_entry_type_t::ENTRY_WRITE:
            out << " addr: " << std::hex << addr;
            out << "  (sz: " << std::dec << size << ")";
            break;
        case trace_entry_type_t::ENTRY_EXCEPTION:
            out << " faulty_addr: " << std::hex << addr;
            out << "  (sig: " << std::dec << size << ")";
            break;
        case trace_entry_type_t::ENTRY_IND:
            out << "  --> target: " << std::hex << addr;
            break;
        }

        out << "\n";
    }
};
